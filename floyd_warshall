import matplotlib.pyplot as plt
import numpy as np
import sys
from matplotlib.ticker import FixedLocator

# Constants
NO_PATH = sys.maxsize  # Represents an infinite distance indicating no path between nodes

def recursive_update(dist, i, j, k, memo):
    """
    Recursively updates the distance matrix for the Floyd-Warshall algorithm.
    
    Args:
        dist (list): The distance matrix.
        i (int): The source node index.
        j (int): The target node index.
        k (int): The intermediate node index.
        memo (dict): Memorization dictionary to store intermediate results.
    
    Returns:
        int: The shortest path from i to j considering nodes up to k.
    """
    if (i, j, k) in memo:
        return memo[(i, j, k)]
    if k == -1:
        return dist[i][j]
    without_k = recursive_update(dist, i, j, k - 1, memo)
    with_k = recursive_update(dist, i, k, k - 1, memo) + recursive_update(dist, k, j, k - 1, memo)
    memo[(i, j, k)] = min(without_k, with_k)
    return memo[(i, j, k)]

def floyd_warshall_recursive(graph):
    """
    Applies the Floyd-Warshall algorithm recursively to find the shortest paths between all pairs of nodes.
    
    Args:
        graph (list): The adjacency matrix of the graph.
    
    Returns:
        tuple: The distance matrix and a boolean indicating if a negative cycle was detected.
    """
    n = len(graph)
    dist = [[NO_PATH if graph[i][j] == 0 else graph[i][j] for j in range(n)] for i in range(n)]
    for i in range(n):
        dist[i][i] = 0
    
    memo = {}
    for i in range(n):
        for j in range(n):
            dist[i][j] = recursive_update(dist, i, j, n-1, memo)
    
    for i in range(n):
        if dist[i][i] < 0:
            print("Negative cycle detected.")
            return None, True
    
    return dist, False

def visualize_matrix(matrix, title):
    """
    Visualizes a matrix with enhancements for infinity values and adds a color scale.
    
    Args:
        matrix (list): The matrix to visualize.
        title (str): The title for the plot.
    """
    matrix = np.array(matrix, dtype=float)  # Convert matrix to float type for visualization
    matrix[matrix == NO_PATH] = np.inf  # Replace NO_PATH values with infinity
    
    fig, ax = plt.subplots()
    cax = ax.matshow(matrix, interpolation='nearest', cmap='viridis',
                     extent=[-0.5, matrix.shape[1]-0.5, matrix.shape[0]-0.5, -0.5])
    
    for (i, j), val in np.ndenumerate(matrix):
        ax.text(j, i, '∞' if np.isinf(val) else f'{val:.0f}', ha='center', va='center', 
                color='black' if np.isinf(val) else 'white', fontsize=10)
    
    fig.colorbar(cax)
    ax.set_title(title)
    plt.xlabel('Destination Vertex')
    plt.ylabel('Source Vertex')
    
    ax.set_xticks(np.arange(-0.5, len(matrix), 1), minor=True)
    ax.set_yticks(np.arange(-0.5, len(matrix), 1), minor=True)
    ax.set_xticklabels(range(len(matrix)))
    ax.set_yticklabels(range(len(matrix)))
    
    plt.figtext(0.99, 0.01, '∞ indicates no path (infinity)', horizontalalignment='right')
    ax.grid(which='minor', color='black', linestyle='-', linewidth=2)
    plt.tight_layout()
    
    plt.show()

if __name__ == "__main__":
    # Define and visualize test graphs for the Floyd-Warshall algorithm
    
    # Test 1: Graph with Positive Weights
    graph_positive = [
        [0, 3, NO_PATH, 7],
        [8, 0, 2, NO_PATH],
        [5, NO_PATH, 0, 1],
        [2, NO_PATH, NO_PATH, 0]
    ]
    print("Test 1: Graph with Positive Weights")
    visualize_matrix(graph_positive, "Initial Distance Matrix - Test 1")
    result, has_negative_cycle = floyd_warshall_recursive(graph_positive)
    if not has_negative_cycle:
        visualize_matrix(result, "Final Distance Matrix - Test 1")
    
    # Test 2: Graph with Negative Weights (No Negative Cycle)
    graph_negative_weights = [
        [0, 1, 3, NO_PATH],
        [NO_PATH, 0, NO_PATH, -2],
        [NO_PATH, 4, 0, NO_PATH],
        [NO_PATH, NO_PATH, NO_PATH, 0]
    ]
    print("Test 2: Graph with Negative Weights")
    visualize_matrix(graph_negative_weights, "Initial Distance Matrix - Test 2")
    result, has_negative_cycle = floyd_warshall_recursive(graph_negative_weights)
    if not has_negative_cycle:
        visualize_matrix(result, "Final Distance Matrix - Test 2")
    
    # Test 3: Graph with a Negative Cycle
    graph_negative_cycle = [
        [0, 1, NO_PATH, NO_PATH],
        [NO_PATH, 0, -1, NO_PATH],
        [NO_PATH, NO_PATH, 0, -1],
        [-1, NO_PATH, NO_PATH, 0]
    ]
    print("Test 3: Graph with a Negative Cycle")
    visualize_matrix(graph_negative_cycle, "Initial Distance Matrix - Test 3")
    result, has_negative_cycle = floyd_warshall_recursive(graph_negative_cycle)
    if has_negative_cycle:
        print("Negative cycle detected. No shortest path matrix available.")
